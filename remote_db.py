# -*- coding: utf-8 -*-
"""
/***************************************************************************
 RemoteDB
                                 A QGIS plugin
 Manage and open SSH connections to remote database servers
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2023-03-16
        git sha              : $Format:%H$
        copyright            : (C) 2023 by Lymperis Efstathios
        email                : geo.elymperis@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication, Qt, QUrl
from qgis.PyQt.QtGui import QIcon, QDesktopServices
from qgis.PyQt.QtWidgets import QAction, QDialog, QListWidgetItem
# Initialize Qt resources from file resources.py
from .resources import *

# Import the code for the DockWidget
from .remote_db_dockwidget import RemoteDBDockWidget
from .add_connection_dialog import AddConnectionDialog
import os.path

from .core.ConnectionManager import ConnectionManager
from .install_packages.check_dependencies import check

from .core.ConnectionListItem import ConnectionListItem

API_EXIST = False
try:
    import sshtunnel
    API_EXIST = True
except:
    try:
        check(['sshtunnel'])
    finally:
        import sshtunnel
        API_EXIST = True


class RemoteDB:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface

        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)

        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'RemoteDB_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u' Remote DB Plugin')
        # TODO: We are going to let the user set this up in a future iteration
        self.toolbar = self.iface.addToolBar(u'RemoteDB')
        self.toolbar.setObjectName(u'RemoteDB')

        # print "** INITIALIZING RemoteDB"

        self.pluginIsActive = False
        self.dockwidget = None

        self.connectionManager = ConnectionManager()

    # noinspection PyMethodMayBeStatic

    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('RemoteDB', message)

    def add_action(
            self,
            icon_path,
            text,
            callback,
            enabled_flag=True,
            add_to_menu=True,
            add_to_toolbar=True,
            status_tip=None,
            whats_this=None,
            parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            self.toolbar.addAction(action)

        if add_to_menu:
            self.iface.addPluginToDatabaseMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/remote_db/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'Open SSH tunnels'),
            callback=self.run,
            parent=self.iface.mainWindow())

    def onClosePlugin(self):
        """Cleanup necessary items here when plugin dockwidget is closed"""

        # Discnonect all active connections on plugin close
        for conn in self.connectionManager.available_connections:
            if conn.is_connected:
                self.disconnect(conn)

        self.dockwidget.closingPlugin.disconnect(self.onClosePlugin)
        self.pluginIsActive = False

    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginDatabaseMenu(
                self.tr(u'& Remote DB Plugin'),
                action)
            self.iface.removeToolBarIcon(action)
        # remove the toolbar
        del self.toolbar

    # --------------------------------------------------------------------------

    def run(self):
        """Run method that loads and starts the plugin"""

        if not self.pluginIsActive:
            self.pluginIsActive = True

            if self.dockwidget == None:
                # Create the dockwidget (after translation) and keep reference
                self.dockwidget = RemoteDBDockWidget()

            # connect to provide cleanup on closing of dockwidget
            self.dockwidget.closingPlugin.connect(self.onClosePlugin)

            self.dockwidget.add_conn_btn.clicked.connect(
                self.add_connection_dialog)
            
            self.dockwidget.open_settings_dir_btn.clicked.connect(
                self.open_settings_folder)

            self.populate_connections_list()

            self.iface.addDockWidget(Qt.LeftDockWidgetArea, self.dockwidget)
            self.dockwidget.show()

 

    def report_status(self, status, message):
        """
        Sets the status label
        """
        if status == "connected":
            self.dockwidget.status_label.setStyleSheet("color: lightgreen")
            self.dockwidget.status_label.setText("connected")

            self.dockwidget.status_report_label.setText(message)

        if status == "disconnected":
            self.dockwidget.status_label.setStyleSheet("color: gray")
            self.dockwidget.status_label.setText("-")

            self.dockwidget.status_report_label.setText(message)

        if status == "error":
            self.dockwidget.status_label.setStyleSheet("color: red")
            self.dockwidget.status_label.setText("disconnected")

            self.dockwidget.status_report_label.setText(message)

    def populate_connections_list(self):
        
        self.dockwidget.conn_list_widget.clear()
        for available_connection in self.connectionManager.available_connections:

            custom_widget = ConnectionListItem(connection=available_connection, parent=None)
            new_item = QListWidgetItem(self.dockwidget.conn_list_widget)
            new_item.setSizeHint(custom_widget.sizeHint())
            self.dockwidget.conn_list_widget.addItem(new_item)
            self.dockwidget.conn_list_widget.setItemWidget(
                new_item,
                custom_widget
            )


    def add_connection_dialog(self):
        dialog = AddConnectionDialog()
        result = dialog.exec_()
        if result == QDialog.Accepted:
            connection_info = dialog.get_connection_info()

            self.connectionManager.add_connection(connection_info)
            # Repopulate connections list
            self.populate_connections_list()
    

    def open_settings_folder(self):
        QDesktopServices.openUrl(QUrl.fromLocalFile(self.connectionManager.SETTINGS_FOLDER))